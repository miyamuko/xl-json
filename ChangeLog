2011-12-15  MIYAMUKO Katsuyuki

	* (parse-json-number): most-positive-single-float 以上で
	most-positive-double-float 未満の数値をパースできるように修正

	* (json-decode-file): ファイルを相対パスで指定した場合、
	カレントバッファのデフォルトディレクトリからの相対パスで
	ファイルを開く用にした

2011-07-28  MIYAMUKO Katsuyuki

	* (save-current-buffer): with-set-buffer してから現在のバッファを
	保存するようにした (#4)
	https://github.com/miyamuko/xl-json/issues/4

2010-08-07  MIYAMUKO Katsuyuki

	* (json-key-p): 指定されたキーが json オブジェクトのキーなら t を返す。
	---
	(let ((json (json:json-decode (xhr:xhr-get "http://b.hatena.ne.jp/entry/json/http://common-lisp.net/project/cl-json/"
	                                           :key 'xhr:xhr-response-text))))
          (json:json-key-p json "count") ;;=> t
          (json:json-key-p json "hoge")) ;;=> nil

2010-08-06  MIYAMUKO Katsuyuki

	* (json-object-keys): 指定した json オブジェクトのキーを取得する。
	json オブジェクトじゃない場合は type-error。
	---
	(let ((json (json:json-decode (xhr:xhr-get "http://b.hatena.ne.jp/entry/json/http://common-lisp.net/project/cl-json/"
	                                           :key 'xhr:xhr-response-text))))
	  (json:json-object-keys json))
	;;=> ("related" "count" "url" "bookmarks" "title" "eid" "entry_url" "screenshot")

	* (json-value): 指定したキーの json データを取得する。
	json-values は複数のキーを指定して多値で取得する関数だが
	json-value はひとつのキーを指定してひとつの値を取得する関数。
	---
	(let ((json (json:json-decode (xhr:xhr-get "http://b.hatena.ne.jp/entry/json/http://common-lisp.net/project/cl-json/"
	                                           :key 'xhr:xhr-response-text))))
	  (json:json-value json `("count" ,#'parse-integer)) ;;=> 3
	  (json:json-value json "title") ;;=> "CL-JSON"
	  )

2010-08-04  MIYAMUKO Katsuyuki

	* (json-values): 指定したキーの json データを取得する。
	---
	(let ((json (json:json-decode (xhr:xhr-get "http://b.hatena.ne.jp/entry/json/http://common-lisp.net/project/cl-json/"
	                                           :key 'xhr:xhr-response-text))))
	  (multiple-value-bind (count title comments)
	      (json:json-values json '(("count" parse-integer)
	                               "title"
	                               ("bookmarks" "comment")))
	    (list count title comments)))
	---
	;; => (3 "CL-JSON" ("lispのリスト構造をJSONで表現" "json common lisp" " Common Lisp で書かれた JSON パーサ"))

	* (alistp): alist かどうかのチェックをちゃんとするようにした。
	関数名を maybe-alistp から alistp に変更。

2010-07-21  MIYAMUKO Katsuyuki

	* (with-temporary-buffer, json-decode, json-decode-file):
	  json 解析用のバッファを毎回削除しないようにした。(#2)
	https://github.com/miyamuko/xl-json/issues/2

	* json 解析用バッファ名を " *json:tmp<gensym>*" から " *json:decode*" に変更

	* Rename *json-tmp-buffer-name* to *json-decode-buffer-name*

	* (json-decode-file): 「～行読み込みました」というメッセージを
	  表示しないようにした。(#1)
	https://github.com/miyamuko/xl-json/issues/1

2008-07-20  MIYAMUKO Katsuyuki

	* (write-each, puts): macros.l に移動

	* (encode-unicode-char): \uxxxx 表記を生成する

	* (*re*): \x20-\x7e までは ascii

2008-07-12  MIYAMUKO Katsuyuki

	* json 0.1.2 リリース!

	* ライセンスファイルを同梱

2008-03-22  MIYAMUKO Katsuyuki

	* (write-each): prefix, suffix, infix をバイトコンパイル時に文字列化

	* - json-encode の高速化
	  - yahoo.co.jp のハテブ json のエンコード: 3s => 2s

	* - json-encode を実装。
	  - ユーティリティをいろいろ追加。

2008-02-23  MIYAMUKO Katsuyuki

	* json 0.1.1 リリース!

	* json-load を json-decode にした。

2008-02-17  MIYAMUKO Katsuyuki

	* json 0.1.0 リリース!

	* (scan-json-toplevel): 空白も無視
	  (delete-json-padding): JSONP の関数名をかなり柔軟に指定して削除

	* - 数値の解析に失敗した場合のエラーメッセージを改善
	  - strict が t のときに toplevel の文字列を受け付けていたのを修正
	  - strict が nil のときは JSON padding だけを消去する。

	* (skip-bare-word): fix indent

	* マクロ化
	  タイポ修正

	* できる限りマクロ化して高速化。

	* (skip-bare-word): 空白文字を含んだ bare word に対応。

	* (json-load-file): filename の check を追加

	* add json-load-file test

	* tests に移動。

	* bumped version number to 0.1.0

	* エラーメッセージの最後にピリオドをつけた

	* (raise-end-of-json-error): 文字列ならクォートしない。

	* :hashtable => :hash-table

	* (scan-json-object): hash-table-test を設定

	* (json-load "") で #\NUL がエラーメッセージに含まれないようにした。

	* (with-temporary-buffer): contents を取らないようにした。

	* (scan-json-object): そのまま返す場合は identiry を使えばよい。

	* (json-load-file): ファイルからロードできるようにした。

	* (json-load): 引数名を変更

	* (skip-bare-word): マクロ化
	  (skip-to-object/array): オブジェクトの開始までごみをスキップ

	* 例外名を export

	* (json-load): strict が nil なら最初の空白を読み飛ばす。

	* loader.l がだいたいできた。

2008-02-16  MIYAMUKO Katsuyuki

	* とりあえずコミット。

	* main.l => loader.l

	* ignore *.lc, XTAGS

	* no need to ni-autoload.

	* json 作成開始
